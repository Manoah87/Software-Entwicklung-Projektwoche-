# Generated by Django 2.1.4 on 2019-01-25 18:40

import DBAccess.Managers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventLogInfo',
            fields=[
                ('EventID', models.AutoField(primary_key=True, serialize=False)),
                ('EventType', models.CharField(default='', max_length=5, verbose_name='Event-Typ')),
                ('EventTime', models.DateTimeField(verbose_name='Logzeit')),
                ('Source', models.CharField(default='', max_length=100, verbose_name='Source')),
                ('EventDescription', models.TextField(default='', verbose_name='Beschreibung')),
                ('EventUrl', models.CharField(default='', max_length=255, verbose_name='URL')),
                ('EventMachineName', models.CharField(default='', max_length=100, verbose_name='MachineName')),
                ('EventUserAgent', models.CharField(default='', max_length=400, verbose_name='UserAgent')),
                ('EventUrlReferrer', models.CharField(default='', max_length=255, verbose_name='Url Referrer')),
            ],
            options={
                'db_table': 'eventlog',
            },
        ),
        migrations.CreateModel(
            name='ProjectInfo',
            fields=[
                ('ProjectID', models.AutoField(primary_key=True, serialize=False, verbose_name='ProjectID')),
                ('ProjectCodeName', models.CharField(default='', max_length=100, unique=True, verbose_name='Codename')),
                ('ProjectDisplayName', models.CharField(default='', max_length=100, verbose_name='Anzeigename')),
                ('StartDate', models.DateField(verbose_name='Startdatum')),
                ('EndDate', models.DateField(verbose_name='Enddatum')),
                ('Enabled', models.BooleanField(default=False, verbose_name='Aktiev')),
            ],
            options={
                'db_table': 'Project',
            },
        ),
        migrations.CreateModel(
            name='ProjectRelaisInfo',
            fields=[
                ('ProjectRelaisID', models.AutoField(primary_key=True, serialize=False)),
                ('ProjectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DBAccess.ProjectInfo')),
            ],
            options={
                'db_table': 'project_relais',
            },
        ),
        migrations.CreateModel(
            name='ProjectSensorInfo',
            fields=[
                ('ProjectSensorID', models.AutoField(primary_key=True, serialize=False)),
                ('Project', models.ForeignKey(db_column='ProjectID', on_delete=django.db.models.deletion.CASCADE, to='DBAccess.ProjectInfo')),
            ],
            options={
                'db_table': 'project_sensor',
            },
        ),
        migrations.CreateModel(
            name='RelaisInfo',
            fields=[
                ('RelaisID', models.AutoField(primary_key=True, serialize=False)),
                ('RelaisCodeName', models.CharField(default='', max_length=100, unique=True, verbose_name='Codename')),
                ('RelaisDisplayName', models.CharField(default='', max_length=100, verbose_name='Displayname')),
                ('GPIO', models.IntegerField(default=0, verbose_name='GPIO')),
                ('Description', models.TextField(default='', verbose_name='Beschreibung')),
            ],
            options={
                'db_table': 'relais',
            },
        ),
        migrations.CreateModel(
            name='ScheduledTaskInfo',
            fields=[
                ('ScheduledTaskID', models.AutoField(primary_key=True, serialize=False)),
                ('TaskCodeName', models.CharField(default='', max_length=100, unique=True, verbose_name='Codename')),
                ('TaskNameDisplay', models.CharField(default='', max_length=100, verbose_name='Anzeigename')),
                ('FilePath', models.CharField(blank=True, default='', max_length=255, verbose_name='FilePath')),
                ('ObjectType', models.CharField(choices=[('sensor', 'Sensor'), ('file', 'File')], default='file', max_length=30, verbose_name='Objekttyp')),
                ('ObjectID', models.IntegerField(default=0, verbose_name='ObjectID')),
                ('Interval', models.TextField(verbose_name='Interval')),
                ('LastRunTime', models.DateTimeField(blank=True, null=True, verbose_name='Letzte Ausführung')),
                ('NextRunTime', models.DateTimeField(null=True, verbose_name='Nächste Ausführung')),
                ('Executions', models.IntegerField(default=0, verbose_name='Ausführungen')),
                ('DeleteAfterLastRun', models.BooleanField(default=False, verbose_name='Nach letztem Ausführen Löschen')),
                ('Enabled', models.BooleanField(default=True, verbose_name='Aktiviert')),
                ('IsRunning', models.BooleanField(default=False, verbose_name='Wird Ausgeführt')),
            ],
            options={
                'db_table': 'scheduled_task',
            },
        ),
        migrations.CreateModel(
            name='SensorInfo',
            fields=[
                ('SensorID', models.AutoField(primary_key=True, serialize=False, verbose_name='SensorID')),
                ('SensorCodeName', models.CharField(default='', max_length=100, unique=True, verbose_name='Codename')),
                ('SensorDisplayName', models.CharField(default='', max_length=100, verbose_name='Displayname')),
                ('SensorType', models.CharField(choices=[('dht22_h', 'DHT22 (Luftfeuchtigkeit)'), ('dht22_t', 'DHT22 (Temperatur)'), ('resistor', 'Fotowiederstand')], default='dht22_h', max_length=50, verbose_name='Sensortyp')),
                ('GPIO', models.IntegerField(default=0, verbose_name='GPIO')),
                ('Description', models.TextField(default='', verbose_name='Beschreibung')),
                ('ShowOnHome', models.BooleanField(default=False, verbose_name='Auf Startseite angezeigen ?')),
            ],
            options={
                'db_table': 'sensor',
            },
        ),
        migrations.CreateModel(
            name='SensorValueInfo',
            fields=[
                ('SensorValueID', models.AutoField(primary_key=True, serialize=False)),
                ('Value', models.DecimalField(decimal_places=2, default=None, max_digits=9, verbose_name='Value')),
                ('Timestamp', models.DateTimeField(default=None, verbose_name='Timestamp')),
                ('Project', models.ForeignKey(db_column='ProjectID', on_delete=django.db.models.deletion.CASCADE, to='DBAccess.ProjectInfo')),
                ('Sensor', models.ForeignKey(db_column='SensorID', on_delete=django.db.models.deletion.CASCADE, to='DBAccess.SensorInfo')),
            ],
            options={
                'db_table': 'sensor_value',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('UserName', models.CharField(blank=True, max_length=100, unique=True, verbose_name='Benutzername')),
                ('FirstName', models.CharField(blank=True, max_length=100, verbose_name='Vorname')),
                ('LastName', models.CharField(blank=True, max_length=100, verbose_name='Nachname')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-Mail')),
                ('Enabled', models.BooleanField(default=True, verbose_name='active')),
                ('UserPrivilegeLevel', models.IntegerField(default=0, verbose_name='Privileg Level')),
                ('DateCreated', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'User',
            },
            managers=[
                ('objects', DBAccess.Managers.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='projectsensorinfo',
            name='Sensor',
            field=models.ForeignKey(db_column='SensorID', on_delete=django.db.models.deletion.CASCADE, to='DBAccess.SensorInfo'),
        ),
        migrations.AddField(
            model_name='projectrelaisinfo',
            name='RelaisID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DBAccess.RelaisInfo'),
        ),
        migrations.AddField(
            model_name='eventloginfo',
            name='UserID',
            field=models.ForeignKey(on_delete=models.SET(-1), to=settings.AUTH_USER_MODEL),
        ),
    ]
